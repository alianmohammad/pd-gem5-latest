--- ethertap.hh
+++ ethertap.hh
@@ -26,6 +38,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  * Authors: Nathan Binkert
+ *          Mohammad Alian
  */
 
 /* @file
@@ -46,22 +59,20 @@
 #include "sim/eventq.hh"
 #include "sim/sim_object.hh"
 
-class TapEvent;
 class TapListener;
 class EtherTapInt;
-
+class TapConnector;
+extern std::vector<bool> pdgem5_ckpt_flag;
 /*
  * Interface to connect a simulated ethernet device to the real world
  */
 class EtherTap : public EtherObject
 {
   protected:
-    friend class TapEvent;
-    TapEvent *event;
-
-  protected:
     friend class TapListener;
     TapListener *listener;
+    friend class TapConnector;
+    TapConnector *connector;
     int socket;
     char *buffer;
     int buflen;
@@ -77,8 +88,18 @@
     std::string device;
     std::queue<EthPacketPtr> packetBuffer;
     EtherTapInt *interface;
+    uint64_t syncQuantum;
+    uint64_t pollQuantum;
+    bool inSwitchTap;
+    bool syncMsgReceived;
+    int syncState;
+    int tapId;
+    bool attached;
 
-    void process(int revent);
+    void process();
+    void sendSync();
+    void recvSync();
+    void accept();
     void enqueue(EthPacketData *packet);
     void retransmit();
 
@@ -98,6 +119,10 @@
 
     friend class TxEvent;
     TxEvent txEvent;
+    EventWrapper<EtherTap, &EtherTap::process> tapInEvent;
+    EventWrapper<EtherTap, &EtherTap::recvSync> recvSyncEvent;
+    EventWrapper<EtherTap, &EtherTap::sendSync> sendSyncEvent;
+    EventWrapper<EtherTap, &EtherTap::accept> acceptEvent;
 
   public:
     typedef EtherTapParams Params;
@@ -114,6 +139,7 @@
 
     virtual bool recvPacket(EthPacketPtr packet);
     virtual void sendDone();
+    bool isattached() { return attached; }
 
     void serialize(CheckpointOut &cp) const M5_ATTR_OVERRIDE;
     void unserialize(CheckpointIn &cp) M5_ATTR_OVERRIDE;
